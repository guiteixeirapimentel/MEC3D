#include <iostream>
#define _USE_MATH_DEFINES
#include <vector>

#include "TriangularMeshWindow.h"

#include "ElementoCte.hpp"
#include "ElementoCteMindlin.hpp"
#include "ElementoLinear.hpp"

#include "Tesselation.hpp"

#include "GeometryCreator.h"

#include "CaseFileReader.h"

int main()
{	
	CaseFileReader cfr;

	double E = 44.42e3;//100000;// 21e9;//1.0;//300.0;// 1.0; //200.0;100000.0;//
	double v = 0.3;//0.25;//0.3;// 0.25;//0.3;  

    //constexpr double kk = 1.0;
    //std::vector<Ponto> pontos = {
    //    {0.0000*kk, 0.0000*kk, 4.0000},
    //    {2.0000*kk, 0.0000*kk, 4.0000},
    //    {0.0000*kk, 2.0000*kk, 4.0000},
    //    {0.0000*kk, 2.0000*kk, 4.0000},
    //    {2.0000*kk, 0.0000*kk, 4.0000},
    //    {2.0000*kk, 2.0000*kk, 4.0000},
    //    {0.0000*kk, 0.0000*kk, 0.0000},
    //    {0.0000*kk, 2.0000*kk, 0.0000},
    //    {2.0000*kk, 0.0000*kk, 0.0000},
    //    {0.0000*kk, 2.0000*kk, 0.0000},
    //    {2.0000*kk, 2.0000*kk, 0.0000},
    //    {2.0000*kk, 0.0000*kk, 0.0000},
    //    {2.0000*kk, 0.0000*kk, 4.0000},
    //    {2.0000*kk, 0.0000*kk, 0.0000},
    //    {2.0000*kk, 2.0000*kk, 0.0000},
    //    {2.0000*kk, 0.0000*kk, 4.0000},
    //    {2.0000*kk, 2.0000*kk, 0.0000},
    //    {2.0000*kk, 2.0000*kk, 4.0000},
    //    {0.0000*kk, 2.0000*kk, 4.0000},
    //    {0.0000*kk, 2.0000*kk, 0.0000},
    //    {0.0000*kk, 0.0000*kk, 0.0000},
    //    {0.0000*kk, 2.0000*kk, 4.0000},
    //    {0.0000*kk, 0.0000*kk, 0.0000},
    //    {0.0000*kk, 0.0000*kk, 4.0000},
    //    {2.0000*kk, 2.0000*kk, 4.0000},
    //    {2.0000*kk, 2.0000*kk, 0.0000},
    //    {0.0000*kk, 2.0000*kk, 0.0000},
    //    {2.0000*kk, 2.0000*kk, 4.0000},
    //    {0.0000*kk, 2.0000*kk, 0.0000},
    //    {0.0000*kk, 2.0000*kk, 4.0000},
    //    {0.0000*kk, 0.0000*kk, 0.0000},
    //    {2.0000*kk, 0.0000*kk, 0.0000},
    //    {0.0000*kk, 0.0000*kk, 4.0000},
    //    {0.0000*kk, 0.0000*kk, 4.0000},
    //    {2.0000*kk, 0.0000*kk, 0.0000},
    //    {2.0000*kk, 0.0000*kk, 4.0000}
    //};
    //std::vector<InstElemento> elementos =
    //{
    // {1,  2,  3},
    // {4,  5,  6},
    // {7,  8,  9},
    // {10, 11, 12},
    // {13, 14, 15+3},
    // {14, 15, 18},
    // {19, 20, 21},
    // {22, 23, 24},
    // {25, 26, 27+3},
    // {26, 27, 30},
    // {31, 32, 33},
    // {34, 35, 36}
    //};
    //std::vector<CondContorno> deslPrescs =
    //{
    //    { 3,  3,  0 },
    //    { 4,  3,  0 }/*,
    //    { 3,  2,  0 },
    //    { 4,  2,  0 },
    //    { 3,  1,  0 },
    //    { 4,  1,  0 }*/
    //};
    //constexpr double P = 1.0;//4.0e-6 / (kk * kk * 2.0 * 2.0);
    //constexpr double F = P * (kk * 2.0 * kk * 2.0);
    //std::vector<CondContorno> forcsPrescs =
    //{
    //    { 1,  3,  P },
    //    { 2,  3,  P }/*,
    //    { 3,  3,  -P },
    //    { 4,  3,  -P }*/
    //};

    constexpr double k = 1.0;
    constexpr double k2 = 1.0;


//    std::vector<Ponto> pontos = 
//    {
//    {0.0000*k, 2.0000*k, 4.0000*k2 },
//    {0.0000*k, 0.0000*k, 4.0000*k2 },
//    {1.0000*k, 1.0000*k, 4.0000*k2 },
//    {2.0000*k, 2.0000*k, 4.0000*k2 },
//    {0.0000*k, 2.0000*k, 4.0000*k2 },
//    {1.0000*k, 1.0000*k, 4.0000*k2 },
//    {2.0000*k, 0.0000*k, 4.0000*k2 },
//    {2.0000*k, 2.0000*k, 4.0000*k2 },
//    {1.0000*k, 1.0000*k, 4.0000*k2 },
//    {0.0000*k, 0.0000*k, 4.0000*k2 },
//    {2.0000*k, 0.0000*k, 4.0000*k2 },
//    {1.0000*k, 1.0000*k, 4.0000*k2 },
//    {2.0000*k, 2.0000*k, 0.0000*k2 },
//    {2.0000*k, 0.0000*k, 0.0000*k2 },
//    {1.0000*k, 1.0000*k, 0.0000*k2 },
//    {0.0000*k, 2.0000*k, 0.0000*k2 },
//    {2.0000*k, 2.0000*k, 0.0000*k2 },
//    {1.0000*k, 1.0000*k, 0.0000*k2 },
//    {0.0000*k, 0.0000*k, 0.0000*k2 },
//    {0.0000*k, 2.0000*k, 0.0000*k2 },
//    {1.0000*k, 1.0000*k, 0.0000*k2 },
//    {0.0000*k, 0.0000*k, 0.0000*k2 },
//    {1.0000*k, 1.0000*k, 0.0000*k2 },
//    {2.0000*k, 0.0000*k, 0.0000*k2 },
//    {2*k, 2*k, 2*k2},
//    {2*k, 1*k, 1*k2},
//    {2*k, 2*k, 0*k2},
//    {2*k, 0*k, 2*k2},
//    {2*k, 1*k, 1*k2},
//    {2*k, 2*k, 2*k2},
//    {2*k, 0*k, 2*k2},
//    {2*k, 0*k, 0*k2},
//    {2*k, 1*k, 1*k2},
//    {2*k, 1*k, 1*k2},
//    {2*k, 0*k, 0*k2},
//    {2*k, 2*k, 0*k2},
//    {2*k, 2*k, 4*k2},
//    {2*k, 1*k, 3*k2},
//    {2*k, 2*k, 2*k2},
//    {2*k, 0*k, 4*k2},
//    {2*k, 1*k, 3*k2},
//    {2*k, 2*k, 4*k2},
//    {2*k, 0*k, 4*k2},
//    {2*k, 0*k, 2*k2},
//    {2*k, 1*k, 3*k2},
//    {2*k, 1*k, 3*k2},
//    {2*k, 0*k, 2*k2},
//    {2*k, 2*k, 2*k2},
//    {0*k, 0*k, 2*k2},
//    {0*k, 1*k, 1*k2},
//    {0*k, 0*k, 0*k2},
//    {0*k, 1*k, 1*k2},
//    {0*k, 0*k, 2*k2},
//    {0*k, 2*k, 2*k2},
//    {0*k, 2*k, 2*k2},
//    {0*k, 2*k, 0*k2},
//    {0*k, 1*k, 1*k2},
//    {0*k, 1*k, 1*k2},
//    {0*k, 2*k, 0*k2},
//    {0*k, 0*k, 0*k2},
//    {0*k, 0*k, 4*k2},
//    {0*k, 1*k, 3*k2},
//    {0*k, 0*k, 2*k2},
//    {0*k, 1*k, 3*k2},
//    {0*k, 0*k, 4*k2},
//    {0*k, 2*k, 4*k2},
//    {0*k, 2*k, 4*k2},
//    {0*k, 2*k, 2*k2},
//    {0*k, 1*k, 3*k2},
//    {0*k, 1*k, 3*k2},
//    {0*k, 2*k, 2*k2},
//    {0*k, 0*k, 2*k2},
//    {0*k, 2*k, 0*k2},
//    {0*k, 2*k, 2*k2},
//    {1*k, 2*k, 1*k2},
//    {1*k, 2*k, 1*k2},
//    {2*k, 2*k, 0*k2},
//    {0*k, 2*k, 0*k2},
//    {2*k, 2*k, 2*k2},
//    {2*k, 2*k, 0*k2},
//    {1*k, 2*k, 1*k2},
//    {1*k, 2*k, 1*k2},
//    {0*k, 2*k, 2*k2},
//    {2*k, 2*k, 2*k2},
//    {0*k, 2*k, 4*k2},
//    {1*k, 2*k, 3*k2},
//    {0*k, 2*k, 2*k2},
//    {2*k, 2*k, 4*k2},
//    {1*k, 2*k, 3*k2},
//    {0*k, 2*k, 4*k2},
//    {2*k, 2*k, 4*k2},
//    {2*k, 2*k, 2*k2},
//    {1*k, 2*k, 3*k2},
//    {1*k, 2*k, 3*k2},
//    {2*k, 2*k, 2*k2},
//    {0*k, 2*k, 2*k2},
//    {2*k, 0*k, 2*k2},
//    {1*k, 0*k, 1*k2},
//    {2*k, 0*k, 0*k2},
//    {0*k, 0*k, 2*k2},
//    {1*k, 0*k, 1*k2},
//    {2*k, 0*k, 2*k2},
//    {0*k, 0*k, 2*k2},
//    {0*k, 0*k, 0*k2},
//    {1*k, 0*k, 1*k2},
//    {1*k, 0*k, 1*k2},
//    {0*k, 0*k, 0*k2},
//    {2*k, 0*k, 0*k2},
//    {2*k, 0*k, 4*k2},
//    {1*k, 0*k, 3*k2},
//    {2*k, 0*k, 2*k2},
//    {0*k, 0*k, 4*k2},
//    {1*k, 0*k, 3*k2},
//    {2*k, 0*k, 4*k2},
//    {0*k, 0*k, 4*k2},
//    {0*k, 0*k, 2*k2},
//    {1*k, 0*k, 3*k2},
//    {1*k, 0*k, 3*k2},
//    {0*k, 0*k, 2*k2},
//    {2*k, 0*k, 2*k2 } 
//};
//    std::vector<InstElemento> elementos = 
//    {
//    {1, 2, 3},
//    {4, 5, 6},
//    {7, 8, 9},
//    {10, 11, 12},
//    {13, 14, 15},
//    {16, 17, 18},
//    {19, 20, 21},
//    {22, 23, 24},
//    {25, 26, 27},
//    { 28, 29, 30},
//    { 31, 32, 33},
//    { 34, 35, 36},
//    { 37, 38, 39},
//    { 40, 41, 42},
//    { 43, 44, 45},
//    { 46, 47, 48},
//    { 49, 50, 51},
//    { 52, 53, 54},
//    { 55, 56, 57},
//    { 58, 59, 60},
//    { 61, 62, 63},
//    { 64, 65, 66},
//    { 67, 68, 69},
//    { 70, 71, 72},
//    { 73, 74, 75},
//    { 76, 77, 78},
//    { 79, 80, 81},
//    { 82, 83, 84},
//    { 85, 86, 87},
//    { 88, 89, 90},
//    { 91, 92, 93},
//    { 94, 95, 96},
//    { 97, 98, 99},
//    { 100, 101, 102},
//    { 103, 104, 105},
//    { 106, 107, 108},
//    { 109, 110, 111},
//    { 112, 113, 114},
//    { 115, 116, 117},
//    { 118, 119, 120} };
//    std::vector<CondContorno> deslPrescs =
//    {
//		{ 5,  3,  0.0 },
//		{ 6,  3,  0.0 },
//		{ 7,  3,  0.0 },
//		{ 8,  3,  0.0 }/*,
//        
//        { 5,  2,  0 },
//        { 6,  2,  0 },
//        { 7,  2,  0 },
//        { 8,  2,  0 },
//        { 5,  1,  0 },
//        { 6,  1,  0 },
//        { 7,  1,  0 },
//        { 8,  1,  0 }*/
//    };
//    /*for (int i = 0; i < elementos.size(); i++)
//    {
//        deslPrescs.push_back({ i + 1, 3, 4.0 });
//    }*/
//    std::vector<CondContorno> forcsPrescs =
//    {
//        { 1,  3,   1.0 },
//        { 2,  3,   1.0 },
//        { 3,  3,   1.0 },
//        { 4,  3,   1.0 }/*,
//        { 5,  3,  -1.0 },
//        { 6,  3,  -1.0 },
//        { 7,  3,  -1.0 },
//        { 8,  3,  -1.0 }*/
//    };

    //std::vector<Ponto> pontos =
    //{
    //    {2.0000 * k, 2.0000 * k, 0.0000 * k2 },
    //    {2.0000 * k, 0.0000 * k, 0.0000 * k2 },
    //    {1.0000 * k, 1.0000 * k, 0.0000 * k2 },
    //    {0.0000 * k, 2.0000 * k, 0.0000 * k2 },
    //    {2.0000 * k, 2.0000 * k, 0.0000 * k2 },
    //    {1.0000 * k, 1.0000 * k, 0.0000 * k2 },
    //    {0.0000 * k, 0.0000 * k, 0.0000 * k2 },
    //    {0.0000 * k, 2.0000 * k, 0.0000 * k2 },
    //    {1.0000 * k, 1.0000 * k, 0.0000 * k2 },
    //    {0.0000 * k, 0.0000 * k, 0.0000 * k2 },
    //    {1.0000 * k, 1.0000 * k, 0.0000 * k2 },
    //    {2.0000 * k, 0.0000 * k, 0.0000 * k2 }
    //};
    //std::vector<InstElemento> elementos =
    //{
    //    {1, 2, 3},
    //    {4, 5, 6},
    //    {7, 8, 9},
    //    {10, 11, 12}
    //};
    //std::vector<CondContorno> forcsPrescs =
    //{
    //    { 1,  3,   1.0 },
    //    { 2,  3,   1.0 },
    //    { 3,  3,   1.0 },
    //    { 4,  3,   1.0 }
    //};
    //std::vector<CondContorno> deslPrescs =
    //{
    //   /*{ 1,  3,   3.333e-5 },
    //   { 2,  3,   3.333e-5 },
    //   { 3,  3,   3.333e-5 },
    //   { 4,  3,   3.333e-5 } */   
    //};


    //std::vector<Ponto> pontos =
    //{
    //    // topo
    //    {0.0000, 2.0000, 20.0000},
    //    {0.0000, 0.0000, 20.0000},
    //    {1.0000, 1.0000, 20.0000},
    //    {2.0000, 2.0000, 20.0000},
    //    {0.0000, 2.0000, 20.0000},
    //    {1.0000, 1.0000, 20.0000},
    //    {2.0000, 0.0000, 20.0000},
    //    {2.0000, 2.0000, 20.0000},
    //    {1.0000, 1.0000, 20.0000},
    //    {0.0000, 0.0000, 20.0000},
    //    {2.0000, 0.0000, 20.0000},
    //    {1.0000, 1.0000, 20.0000},
    //    //baixo
    //    {2.0000, 2.0000, 0.0000},
    //    {2.0000, 0.0000, 0.0000},
    //    {1.0000, 1.0000, 0.0000},
    //    {0.0000, 2.0000, 0.0000},
    //    {2.0000, 2.0000, 0.0000},
    //    {1.0000, 1.0000, 0.0000},
    //    {0.0000, 0.0000, 0.0000},
    //    {0.0000, 2.0000, 0.0000},
    //    {1.0000, 1.0000, 0.0000},
    //    {0.0000, 0.0000, 0.0000},
    //    {1.0000, 1.0000, 0.0000},
    //    {2.0000, 0.0000, 0.0000},
    //    {2.0, 2.0000, 2.0000 + 0.0000},
    //    {2.0, 1.0000, 1.0000 + 0.0000},
    //    {2.0, 2.0000, 0.0000 + 0.0000},
    //    {2.0, 0.0000, 2.0000 + 0.0000},
    //    {2.0, 1.0000, 1.0000 + 0.0000},
    //    {2.0, 2.0000, 2.0000 + 0.0000},
    //    {2.0, 0.0000, 2.0000 + 0.0000},
    //    {2.0, 0.0000, 0.0000 + 0.0000},
    //    {2.0, 1.0000, 1.0000 + 0.0000},
    //    {2.0, 1.0000, 1.0000 + 0.0000},
    //    {2.0, 0.0000, 0.0000 + 0.0000},
    //    {2.0, 2.0000, 0.0000 + 0.0000},
    //    {2.0, 2.0000, 4.0000 + 0.0000},
    //    {2.0, 1.0000, 3.0000 + 0.0000},
    //    {2.0, 2.0000, 2.0000 + 0.0000},
    //    {2.0, 0.0000, 4.0000 + 0.0000},
    //    {2.0, 1.0000, 3.0000 + 0.0000},
    //    {2.0, 2.0000, 4.0000 + 0.0000},
    //    {2.0, 0.0000, 4.0000 + 0.0000},
    //    {2.0, 0.0000, 2.0000 + 0.0000},
    //    {2.0, 1.0000, 3.0000 + 0.0000},
    //    {2.0, 1.0000, 3.0000 + 0.0000},
    //    {2.0, 0.0000, 2.0000 + 0.0000},
    //    {2.0, 2.0000, 2.0000 + 0.0000},
    //    {0.0, 0.0000, 2.0000 + 0.0000},
    //    {0.0, 1.0000, 1.0000 + 0.0000},
    //    {0.0, 0.0000, 0.0000 + 0.0000},
    //    {0.0, 1.0000, 1.0000 + 0.0000},
    //    {0.0, 0.0000, 2.0000 + 0.0000},
    //    {0.0, 2.0000, 2.0000 + 0.0000},
    //    {0.0, 2.0000, 2.0000 + 0.0000},
    //    {0.0, 2.0000, 0.0000 + 0.0000},
    //    {0.0, 1.0000, 1.0000 + 0.0000},
    //    {0.0, 1.0000, 1.0000 + 0.0000},
    //    {0.0, 2.0000, 0.0000 + 0.0000},
    //    {0.0, 0.0000, 0.0000 + 0.0000},
    //    {0.0, 0.0000, 4.0000 + 0.0000},
    //    {0.0, 1.0000, 3.0000 + 0.0000},
    //    {0.0, 0.0000, 2.0000 + 0.0000},
    //    {0.0, 1.0000, 3.0000 + 0.0000},
    //    {0.0, 0.0000, 4.0000 + 0.0000},
    //    {0.0, 2.0000, 4.0000 + 0.0000},
    //    {0.0, 2.0000, 4.0000 + 0.0000},
    //    {0.0, 2.0000, 2.0000 + 0.0000},
    //    {0.0, 1.0000, 3.0000 + 0.0000},
    //    {0.0, 1.0000, 3.0000 + 0.0000},
    //    {0.0, 2.0000, 2.0000 + 0.0000},
    //    {0.0, 0.0000, 2.0000 + 0.0000},
    //    {0.0, 2.0000, 0.0000 + 0.0000},
    //    {0.0, 2.0000, 2.0000 + 0.0000},
    //    {1.0, 2.0000, 1.0000 + 0.0000},
    //    {1.0, 2.0000, 1.0000 + 0.0000},
    //    {2.0, 2.0000, 0.0000 + 0.0000},
    //    {0.0, 2.0000, 0.0000 + 0.0000},
    //    {2.0, 2.0000, 2.0000 + 0.0000},
    //    {2.0, 2.0000, 0.0000 + 0.0000},
    //    {1.0, 2.0000, 1.0000 + 0.0000},
    //    {1.0, 2.0000, 1.0000 + 0.0000},
    //    {0.0, 2.0000, 2.0000 + 0.0000},
    //    {2.0, 2.0000, 2.0000 + 0.0000},
    //    {0.0, 2.0000, 4.0000 + 0.0000},
    //    {1.0, 2.0000, 3.0000 + 0.0000},
    //    {0.0, 2.0000, 2.0000 + 0.0000},
    //    {2.0, 2.0000, 4.0000 + 0.0000},
    //    {1.0, 2.0000, 3.0000 + 0.0000},
    //    {0.0, 2.0000, 4.0000 + 0.0000},
    //    {2.0, 2.0000, 4.0000 + 0.0000},
    //    {2.0, 2.0000, 2.0000 + 0.0000},
    //    {1.0, 2.0000, 3.0000 + 0.0000},
    //    {1.0, 2.0000, 3.0000 + 0.0000},
    //    {2.0, 2.0000, 2.0000 + 0.0000},
    //    {0.0, 2.0000, 2.0000 + 0.0000},
    //    {2.0, 0.0000, 2.0000 + 0.0000},
    //    {1.0, 0.0000, 1.0000 + 0.0000},
    //    {2.0, 0.0000, 0.0000 + 0.0000},
    //    {0.0, 0.0000, 2.0000 + 0.0000},
    //    {1.0, 0.0000, 1.0000 + 0.0000},
    //    {2.0, 0.0000, 2.0000 + 0.0000},
    //    {0.0, 0.0000, 2.0000 + 0.0000},
    //    {0.0, 0.0000, 0.0000 + 0.0000},
    //    {1.0, 0.0000, 1.0000 + 0.0000},
    //    {1.0, 0.0000, 1.0000 + 0.0000},
    //    {0.0, 0.0000, 0.0000 + 0.0000},
    //    {2.0, 0.0000, 0.0000 + 0.0000},
    //    {2.0, 0.0000, 4.0000 + 0.0000},
    //    {1.0, 0.0000, 3.0000 + 0.0000},
    //    {2.0, 0.0000, 2.0000 + 0.0000},
    //    {0.0, 0.0000, 4.0000 + 0.0000},
    //    {1.0, 0.0000, 3.0000 + 0.0000},
    //    {2.0, 0.0000, 4.0000 + 0.0000},
    //    {0.0, 0.0000, 4.0000 + 0.0000},
    //    {0.0, 0.0000, 2.0000 + 0.0000},
    //    {1.0, 0.0000, 3.0000 + 0.0000},
    //    {1.0, 0.0000, 3.0000 + 0.0000},
    //    {0.0, 0.0000, 2.0000 + 0.0000},
    //    {2.0, 0.0000, 2.0000 + 0.0000},
    //    {2.0, 2.0000, 2.0000 + 4.0000},
    //    {2.0, 1.0000, 1.0000 + 4.0000},
    //    {2.0, 2.0000, 0.0000 + 4.0000},
    //    {2.0, 0.0000, 2.0000 + 4.0000},
    //    {2.0, 1.0000, 1.0000 + 4.0000},
    //    {2.0, 2.0000, 2.0000 + 4.0000},
    //    {2.0, 0.0000, 2.0000 + 4.0000},
    //    {2.0, 0.0000, 0.0000 + 4.0000},
    //    {2.0, 1.0000, 1.0000 + 4.0000},
    //    {2.0, 1.0000, 1.0000 + 4.0000},
    //    {2.0, 0.0000, 0.0000 + 4.0000},
    //    {2.0, 2.0000, 0.0000 + 4.0000},
    //    {2.0, 2.0000, 4.0000 + 4.0000},
    //    {2.0, 1.0000, 3.0000 + 4.0000},
    //    {2.0, 2.0000, 2.0000 + 4.0000},
    //    {2.0, 0.0000, 4.0000 + 4.0000},
    //    {2.0, 1.0000, 3.0000 + 4.0000},
    //    {2.0, 2.0000, 4.0000 + 4.0000},
    //    {2.0, 0.0000, 4.0000 + 4.0000},
    //    {2.0, 0.0000, 2.0000 + 4.0000},
    //    {2.0, 1.0000, 3.0000 + 4.0000},
    //    {2.0, 1.0000, 3.0000 + 4.0000},
    //    {2.0, 0.0000, 2.0000 + 4.0000},
    //    {2.0, 2.0000, 2.0000 + 4.0000},
    //    {0.0, 0.0000, 2.0000 + 4.0000},
    //    {0.0, 1.0000, 1.0000 + 4.0000},
    //    {0.0, 0.0000, 0.0000 + 4.0000},
    //    {0.0, 1.0000, 1.0000 + 4.0000},
    //    {0.0, 0.0000, 2.0000 + 4.0000},
    //    {0.0, 2.0000, 2.0000 + 4.0000},
    //    {0.0, 2.0000, 2.0000 + 4.0000},
    //    {0.0, 2.0000, 0.0000 + 4.0000},
    //    {0.0, 1.0000, 1.0000 + 4.0000},
    //    {0.0, 1.0000, 1.0000 + 4.0000},
    //    {0.0, 2.0000, 0.0000 + 4.0000},
    //    {0.0, 0.0000, 0.0000 + 4.0000},
    //    {0.0, 0.0000, 4.0000 + 4.0000},
    //    {0.0, 1.0000, 3.0000 + 4.0000},
    //    {0.0, 0.0000, 2.0000 + 4.0000},
    //    {0.0, 1.0000, 3.0000 + 4.0000},
    //    {0.0, 0.0000, 4.0000 + 4.0000},
    //    {0.0, 2.0000, 4.0000 + 4.0000},
    //    {0.0, 2.0000, 4.0000 + 4.0000},
    //    {0.0, 2.0000, 2.0000 + 4.0000},
    //    {0.0, 1.0000, 3.0000 + 4.0000},
    //    {0.0, 1.0000, 3.0000 + 4.0000},
    //    {0.0, 2.0000, 2.0000 + 4.0000},
    //    {0.0, 0.0000, 2.0000 + 4.0000},
    //    {0.0, 2.0000, 0.0000 + 4.0000},
    //    {0.0, 2.0000, 2.0000 + 4.0000},
    //    {1.0, 2.0000, 1.0000 + 4.0000},
    //    {1.0, 2.0000, 1.0000 + 4.0000},
    //    {2.0, 2.0000, 0.0000 + 4.0000},
    //    {0.0, 2.0000, 0.0000 + 4.0000},
    //    {2.0, 2.0000, 2.0000 + 4.0000},
    //    {2.0, 2.0000, 0.0000 + 4.0000},
    //    {1.0, 2.0000, 1.0000 + 4.0000},
    //    {1.0, 2.0000, 1.0000 + 4.0000},
    //    {0.0, 2.0000, 2.0000 + 4.0000},
    //    {2.0, 2.0000, 2.0000 + 4.0000},
    //    {0.0, 2.0000, 4.0000 + 4.0000},
    //    {1.0, 2.0000, 3.0000 + 4.0000},
    //    {0.0, 2.0000, 2.0000 + 4.0000},
    //    {2.0, 2.0000, 4.0000 + 4.0000},
    //    {1.0, 2.0000, 3.0000 + 4.0000},
    //    {0.0, 2.0000, 4.0000 + 4.0000},
    //    {2.0, 2.0000, 4.0000 + 4.0000},
    //    {2.0, 2.0000, 2.0000 + 4.0000},
    //    {1.0, 2.0000, 3.0000 + 4.0000},
    //    {1.0, 2.0000, 3.0000 + 4.0000},
    //    {2.0, 2.0000, 2.0000 + 4.0000},
    //    {0.0, 2.0000, 2.0000 + 4.0000},
    //    {2.0, 0.0000, 2.0000 + 4.0000},
    //    {1.0, 0.0000, 1.0000 + 4.0000},
    //    {2.0, 0.0000, 0.0000 + 4.0000},
    //    {0.0, 0.0000, 2.0000 + 4.0000},
    //    {1.0, 0.0000, 1.0000 + 4.0000},
    //    {2.0, 0.0000, 2.0000 + 4.0000},
    //    {0.0, 0.0000, 2.0000 + 4.0000},
    //    {0.0, 0.0000, 0.0000 + 4.0000},
    //    {1.0, 0.0000, 1.0000 + 4.0000},
    //    {1.0, 0.0000, 1.0000 + 4.0000},
    //    {0.0, 0.0000, 0.0000 + 4.0000},
    //    {2.0, 0.0000, 0.0000 + 4.0000},
    //    {2.0, 0.0000, 4.0000 + 4.0000},
    //    {1.0, 0.0000, 3.0000 + 4.0000},
    //    {2.0, 0.0000, 2.0000 + 4.0000},
    //    {0.0, 0.0000, 4.0000 + 4.0000},
    //    {1.0, 0.0000, 3.0000 + 4.0000},
    //    {2.0, 0.0000, 4.0000 + 4.0000},
    //    {0.0, 0.0000, 4.0000 + 4.0000},
    //    {0.0, 0.0000, 2.0000 + 4.0000},
    //    {1.0, 0.0000, 3.0000 + 4.0000},
    //    {1.0, 0.0000, 3.0000 + 4.0000},
    //    {0.0, 0.0000, 2.0000 + 4.0000},
    //    {2.0, 0.0000, 2.0000 + 4.0000},
    //    {2.0, 2.0000, 2.0000 + 8.0000},
    //    {2.0, 1.0000, 1.0000 + 8.0000},
    //    {2.0, 2.0000, 0.0000 + 8.0000},
    //    {2.0, 0.0000, 2.0000 + 8.0000},
    //    {2.0, 1.0000, 1.0000 + 8.0000},
    //    {2.0, 2.0000, 2.0000 + 8.0000},
    //    {2.0, 0.0000, 2.0000 + 8.0000},
    //    {2.0, 0.0000, 0.0000 + 8.0000},
    //    {2.0, 1.0000, 1.0000 + 8.0000},
    //    {2.0, 1.0000, 1.0000 + 8.0000},
    //    {2.0, 0.0000, 0.0000 + 8.0000},
    //    {2.0, 2.0000, 0.0000 + 8.0000},
    //    {2.0, 2.0000, 4.0000 + 8.0000},
    //    {2.0, 1.0000, 3.0000 + 8.0000},
    //    {2.0, 2.0000, 2.0000 + 8.0000},
    //    {2.0, 0.0000, 4.0000 + 8.0000},
    //    {2.0, 1.0000, 3.0000 + 8.0000},
    //    {2.0, 2.0000, 4.0000 + 8.0000},
    //    {2.0, 0.0000, 4.0000 + 8.0000},
    //    {2.0, 0.0000, 2.0000 + 8.0000},
    //    {2.0, 1.0000, 3.0000 + 8.0000},
    //    {2.0, 1.0000, 3.0000 + 8.0000},
    //    {2.0, 0.0000, 2.0000 + 8.0000},
    //    {2.0, 2.0000, 2.0000 + 8.0000},
    //    {0.0, 0.0000, 2.0000 + 8.0000},
    //    {0.0, 1.0000, 1.0000 + 8.0000},
    //    {0.0, 0.0000, 0.0000 + 8.0000},
    //    {0.0, 1.0000, 1.0000 + 8.0000},
    //    {0.0, 0.0000, 2.0000 + 8.0000},
    //    {0.0, 2.0000, 2.0000 + 8.0000},
    //    {0.0, 2.0000, 2.0000 + 8.0000},
    //    {0.0, 2.0000, 0.0000 + 8.0000},
    //    {0.0, 1.0000, 1.0000 + 8.0000},
    //    {0.0, 1.0000, 1.0000 + 8.0000},
    //    {0.0, 2.0000, 0.0000 + 8.0000},
    //    {0.0, 0.0000, 0.0000 + 8.0000},
    //    {0.0, 0.0000, 4.0000 + 8.0000},
    //    {0.0, 1.0000, 3.0000 + 8.0000},
    //    {0.0, 0.0000, 2.0000 + 8.0000},
    //    {0.0, 1.0000, 3.0000 + 8.0000},
    //    {0.0, 0.0000, 4.0000 + 8.0000},
    //    {0.0, 2.0000, 4.0000 + 8.0000},
    //    {0.0, 2.0000, 4.0000 + 8.0000},
    //    {0.0, 2.0000, 2.0000 + 8.0000},
    //    {0.0, 1.0000, 3.0000 + 8.0000},
    //    {0.0, 1.0000, 3.0000 + 8.0000},
    //    {0.0, 2.0000, 2.0000 + 8.0000},
    //    {0.0, 0.0000, 2.0000 + 8.0000},
    //    {0.0, 2.0000, 0.0000 + 8.0000},
    //    {0.0, 2.0000, 2.0000 + 8.0000},
    //    {1.0, 2.0000, 1.0000 + 8.0000},
    //    {1.0, 2.0000, 1.0000 + 8.0000},
    //    {2.0, 2.0000, 0.0000 + 8.0000},
    //    {0.0, 2.0000, 0.0000 + 8.0000},
    //    {2.0, 2.0000, 2.0000 + 8.0000},
    //    {2.0, 2.0000, 0.0000 + 8.0000},
    //    {1.0, 2.0000, 1.0000 + 8.0000},
    //    {1.0, 2.0000, 1.0000 + 8.0000},
    //    {0.0, 2.0000, 2.0000 + 8.0000},
    //    {2.0, 2.0000, 2.0000 + 8.0000},
    //    {0.0, 2.0000, 4.0000 + 8.0000},
    //    {1.0, 2.0000, 3.0000 + 8.0000},
    //    {0.0, 2.0000, 2.0000 + 8.0000},
    //    {2.0, 2.0000, 4.0000 + 8.0000},
    //    {1.0, 2.0000, 3.0000 + 8.0000},
    //    {0.0, 2.0000, 4.0000 + 8.0000},
    //    {2.0, 2.0000, 4.0000 + 8.0000},
    //    {2.0, 2.0000, 2.0000 + 8.0000},
    //    {1.0, 2.0000, 3.0000 + 8.0000},
    //    {1.0, 2.0000, 3.0000 + 8.0000},
    //    {2.0, 2.0000, 2.0000 + 8.0000},
    //    {0.0, 2.0000, 2.0000 + 8.0000},
    //    {2.0, 0.0000, 2.0000 + 8.0000},
    //    {1.0, 0.0000, 1.0000 + 8.0000},
    //    {2.0, 0.0000, 0.0000 + 8.0000},
    //    {0.0, 0.0000, 2.0000 + 8.0000},
    //    {1.0, 0.0000, 1.0000 + 8.0000},
    //    {2.0, 0.0000, 2.0000 + 8.0000},
    //    {0.0, 0.0000, 2.0000 + 8.0000},
    //    {0.0, 0.0000, 0.0000 + 8.0000},
    //    {1.0, 0.0000, 1.0000 + 8.0000},
    //    {1.0, 0.0000, 1.0000 + 8.0000},
    //    {0.0, 0.0000, 0.0000 + 8.0000},
    //    {2.0, 0.0000, 0.0000 + 8.0000},
    //    {2.0, 0.0000, 4.0000 + 8.0000},
    //    {1.0, 0.0000, 3.0000 + 8.0000},
    //    {2.0, 0.0000, 2.0000 + 8.0000},
    //    {0.0, 0.0000, 4.0000 + 8.0000},
    //    {1.0, 0.0000, 3.0000 + 8.0000},
    //    {2.0, 0.0000, 4.0000 + 8.0000},
    //    {0.0, 0.0000, 4.0000 + 8.0000},
    //    {0.0, 0.0000, 2.0000 + 8.0000},
    //    {1.0, 0.0000, 3.0000 + 8.0000},
    //    {1.0, 0.0000, 3.0000 + 8.0000},
    //    {0.0, 0.0000, 2.0000 + 8.0000},
    //    {2.0, 0.0000, 2.0000 + 8.0000},
    //    {2.0, 2.0000, 2.0000 + 12.0000},
    //    {2.0, 1.0000, 1.0000 + 12.0000},
    //    {2.0, 2.0000, 0.0000 + 12.0000},
    //    {2.0, 0.0000, 2.0000 + 12.0000},
    //    {2.0, 1.0000, 1.0000 + 12.0000},
    //    {2.0, 2.0000, 2.0000 + 12.0000},
    //    {2.0, 0.0000, 2.0000 + 12.0000},
    //    {2.0, 0.0000, 0.0000 + 12.0000},
    //    {2.0, 1.0000, 1.0000 + 12.0000},
    //    {2.0, 1.0000, 1.0000 + 12.0000},
    //    {2.0, 0.0000, 0.0000 + 12.0000},
    //    {2.0, 2.0000, 0.0000 + 12.0000},
    //    {2.0, 2.0000, 4.0000 + 12.0000},
    //    {2.0, 1.0000, 3.0000 + 12.0000},
    //    {2.0, 2.0000, 2.0000 + 12.0000},
    //    {2.0, 0.0000, 4.0000 + 12.0000},
    //    {2.0, 1.0000, 3.0000 + 12.0000},
    //    {2.0, 2.0000, 4.0000 + 12.0000},
    //    {2.0, 0.0000, 4.0000 + 12.0000},
    //    {2.0, 0.0000, 2.0000 + 12.0000},
    //    {2.0, 1.0000, 3.0000 + 12.0000},
    //    {2.0, 1.0000, 3.0000 + 12.0000},
    //    {2.0, 0.0000, 2.0000 + 12.0000},
    //    {2.0, 2.0000, 2.0000 + 12.0000},
    //    {0.0, 0.0000, 2.0000 + 12.0000},
    //    {0.0, 1.0000, 1.0000 + 12.0000},
    //    {0.0, 0.0000, 0.0000 + 12.0000},
    //    {0.0, 1.0000, 1.0000 + 12.0000},
    //    {0.0, 0.0000, 2.0000 + 12.0000},
    //    {0.0, 2.0000, 2.0000 + 12.0000},
    //    {0.0, 2.0000, 2.0000 + 12.0000},
    //    {0.0, 2.0000, 0.0000 + 12.0000},
    //    {0.0, 1.0000, 1.0000 + 12.0000},
    //    {0.0, 1.0000, 1.0000 + 12.0000},
    //    {0.0, 2.0000, 0.0000 + 12.0000},
    //    {0.0, 0.0000, 0.0000 + 12.0000},
    //    {0.0, 0.0000, 4.0000 + 12.0000},
    //    {0.0, 1.0000, 3.0000 + 12.0000},
    //    {0.0, 0.0000, 2.0000 + 12.0000},
    //    {0.0, 1.0000, 3.0000 + 12.0000},
    //    {0.0, 0.0000, 4.0000 + 12.0000},
    //    {0.0, 2.0000, 4.0000 + 12.0000},
    //    {0.0, 2.0000, 4.0000 + 12.0000},
    //    {0.0, 2.0000, 2.0000 + 12.0000},
    //    {0.0, 1.0000, 3.0000 + 12.0000},
    //    {0.0, 1.0000, 3.0000 + 12.0000},
    //    {0.0, 2.0000, 2.0000 + 12.0000},
    //    {0.0, 0.0000, 2.0000 + 12.0000},
    //    {0.0, 2.0000, 0.0000 + 12.0000},
    //    {0.0, 2.0000, 2.0000 + 12.0000},
    //    {1.0, 2.0000, 1.0000 + 12.0000},
    //    {1.0, 2.0000, 1.0000 + 12.0000},
    //    {2.0, 2.0000, 0.0000 + 12.0000},
    //    {0.0, 2.0000, 0.0000 + 12.0000},
    //    {2.0, 2.0000, 2.0000 + 12.0000},
    //    {2.0, 2.0000, 0.0000 + 12.0000},
    //    {1.0, 2.0000, 1.0000 + 12.0000},
    //    {1.0, 2.0000, 1.0000 + 12.0000},
    //    {0.0, 2.0000, 2.0000 + 12.0000},
    //    {2.0, 2.0000, 2.0000 + 12.0000},
    //    {0.0, 2.0000, 4.0000 + 12.0000},
    //    {1.0, 2.0000, 3.0000 + 12.0000},
    //    {0.0, 2.0000, 2.0000 + 12.0000},
    //    {2.0, 2.0000, 4.0000 + 12.0000},
    //    {1.0, 2.0000, 3.0000 + 12.0000},
    //    {0.0, 2.0000, 4.0000 + 12.0000},
    //    {2.0, 2.0000, 4.0000 + 12.0000},
    //    {2.0, 2.0000, 2.0000 + 12.0000},
    //    {1.0, 2.0000, 3.0000 + 12.0000},
    //    {1.0, 2.0000, 3.0000 + 12.0000},
    //    {2.0, 2.0000, 2.0000 + 12.0000},
    //    {0.0, 2.0000, 2.0000 + 12.0000},
    //    {2.0, 0.0000, 2.0000 + 12.0000},
    //    {1.0, 0.0000, 1.0000 + 12.0000},
    //    {2.0, 0.0000, 0.0000 + 12.0000},
    //    {0.0, 0.0000, 2.0000 + 12.0000},
    //    {1.0, 0.0000, 1.0000 + 12.0000},
    //    {2.0, 0.0000, 2.0000 + 12.0000},
    //    {0.0, 0.0000, 2.0000 + 12.0000},
    //    {0.0, 0.0000, 0.0000 + 12.0000},
    //    {1.0, 0.0000, 1.0000 + 12.0000},
    //    {1.0, 0.0000, 1.0000 + 12.0000},
    //    {0.0, 0.0000, 0.0000 + 12.0000},
    //    {2.0, 0.0000, 0.0000 + 12.0000},
    //    {2.0, 0.0000, 4.0000 + 12.0000},
    //    {1.0, 0.0000, 3.0000 + 12.0000},
    //    {2.0, 0.0000, 2.0000 + 12.0000},
    //    {0.0, 0.0000, 4.0000 + 12.0000},
    //    {1.0, 0.0000, 3.0000 + 12.0000},
    //    {2.0, 0.0000, 4.0000 + 12.0000},
    //    {0.0, 0.0000, 4.0000 + 12.0000},
    //    {0.0, 0.0000, 2.0000 + 12.0000},
    //    {1.0, 0.0000, 3.0000 + 12.0000},
    //    {1.0, 0.0000, 3.0000 + 12.0000},
    //    {0.0, 0.0000, 2.0000 + 12.0000},
    //    {2.0, 0.0000, 2.0000 + 12.0000},
    //    {2.0, 2.0000, 2.0000 + 16.0000},
    //    {2.0, 1.0000, 1.0000 + 16.0000},
    //    {2.0, 2.0000, 0.0000 + 16.0000},
    //    {2.0, 0.0000, 2.0000 + 16.0000},
    //    {2.0, 1.0000, 1.0000 + 16.0000},
    //    {2.0, 2.0000, 2.0000 + 16.0000},
    //    {2.0, 0.0000, 2.0000 + 16.0000},
    //    {2.0, 0.0000, 0.0000 + 16.0000},
    //    {2.0, 1.0000, 1.0000 + 16.0000},
    //    {2.0, 1.0000, 1.0000 + 16.0000},
    //    {2.0, 0.0000, 0.0000 + 16.0000},
    //    {2.0, 2.0000, 0.0000 + 16.0000},
    //    {2.0, 2.0000, 4.0000 + 16.0000},
    //    {2.0, 1.0000, 3.0000 + 16.0000},
    //    {2.0, 2.0000, 2.0000 + 16.0000},
    //    {2.0, 0.0000, 4.0000 + 16.0000},
    //    {2.0, 1.0000, 3.0000 + 16.0000},
    //    {2.0, 2.0000, 4.0000 + 16.0000},
    //    {2.0, 0.0000, 4.0000 + 16.0000},
    //    {2.0, 0.0000, 2.0000 + 16.0000},
    //    {2.0, 1.0000, 3.0000 + 16.0000},
    //    {2.0, 1.0000, 3.0000 + 16.0000},
    //    {2.0, 0.0000, 2.0000 + 16.0000},
    //    {2.0, 2.0000, 2.0000 + 16.0000},
    //    {0.0, 0.0000, 2.0000 + 16.0000},
    //    {0.0, 1.0000, 1.0000 + 16.0000},
    //    {0.0, 0.0000, 0.0000 + 16.0000},
    //    {0.0, 1.0000, 1.0000 + 16.0000},
    //    {0.0, 0.0000, 2.0000 + 16.0000},
    //    {0.0, 2.0000, 2.0000 + 16.0000},
    //    {0.0, 2.0000, 2.0000 + 16.0000},
    //    {0.0, 2.0000, 0.0000 + 16.0000},
    //    {0.0, 1.0000, 1.0000 + 16.0000},
    //    {0.0, 1.0000, 1.0000 + 16.0000},
    //    {0.0, 2.0000, 0.0000 + 16.0000},
    //    {0.0, 0.0000, 0.0000 + 16.0000},
    //    {0.0, 0.0000, 4.0000 + 16.0000},
    //    {0.0, 1.0000, 3.0000 + 16.0000},
    //    {0.0, 0.0000, 2.0000 + 16.0000},
    //    {0.0, 1.0000, 3.0000 + 16.0000},
    //    {0.0, 0.0000, 4.0000 + 16.0000},
    //    {0.0, 2.0000, 4.0000 + 16.0000},
    //    {0.0, 2.0000, 4.0000 + 16.0000},
    //    {0.0, 2.0000, 2.0000 + 16.0000},
    //    {0.0, 1.0000, 3.0000 + 16.0000},
    //    {0.0, 1.0000, 3.0000 + 16.0000},
    //    {0.0, 2.0000, 2.0000 + 16.0000},
    //    {0.0, 0.0000, 2.0000 + 16.0000},
    //    {0.0, 2.0000, 0.0000 + 16.0000},
    //    {0.0, 2.0000, 2.0000 + 16.0000},
    //    {1.0, 2.0000, 1.0000 + 16.0000},
    //    {1.0, 2.0000, 1.0000 + 16.0000},
    //    {2.0, 2.0000, 0.0000 + 16.0000},
    //    {0.0, 2.0000, 0.0000 + 16.0000},
    //    {2.0, 2.0000, 2.0000 + 16.0000},
    //    {2.0, 2.0000, 0.0000 + 16.0000},
    //    {1.0, 2.0000, 1.0000 + 16.0000},
    //    {1.0, 2.0000, 1.0000 + 16.0000},
    //    {0.0, 2.0000, 2.0000 + 16.0000},
    //    {2.0, 2.0000, 2.0000 + 16.0000},
    //    {0.0, 2.0000, 4.0000 + 16.0000},
    //    {1.0, 2.0000, 3.0000 + 16.0000},
    //    {0.0, 2.0000, 2.0000 + 16.0000},
    //    {2.0, 2.0000, 4.0000 + 16.0000},
    //    {1.0, 2.0000, 3.0000 + 16.0000},
    //    {0.0, 2.0000, 4.0000 + 16.0000},
    //    {2.0, 2.0000, 4.0000 + 16.0000},
    //    {2.0, 2.0000, 2.0000 + 16.0000},
    //    {1.0, 2.0000, 3.0000 + 16.0000},
    //    {1.0, 2.0000, 3.0000 + 16.0000},
    //    {2.0, 2.0000, 2.0000 + 16.0000},
    //    {0.0, 2.0000, 2.0000 + 16.0000},
    //    {2.0, 0.0000, 2.0000 + 16.0000},
    //    {1.0, 0.0000, 1.0000 + 16.0000},
    //    {2.0, 0.0000, 0.0000 + 16.0000},
    //    {0.0, 0.0000, 2.0000 + 16.0000},
    //    {1.0, 0.0000, 1.0000 + 16.0000},
    //    {2.0, 0.0000, 2.0000 + 16.0000},
    //    {0.0, 0.0000, 2.0000 + 16.0000},
    //    {0.0, 0.0000, 0.0000 + 16.0000},
    //    {1.0, 0.0000, 1.0000 + 16.0000},
    //    {1.0, 0.0000, 1.0000 + 16.0000},
    //    {0.0, 0.0000, 0.0000 + 16.0000},
    //    {2.0, 0.0000, 0.0000 + 16.0000},
    //    {2.0, 0.0000, 4.0000 + 16.0000},
    //    {1.0, 0.0000, 3.0000 + 16.0000},
    //    {2.0, 0.0000, 2.0000 + 16.0000},
    //    {0.0, 0.0000, 4.0000 + 16.0000},
    //    {1.0, 0.0000, 3.0000 + 16.0000},
    //    {2.0, 0.0000, 4.0000 + 16.0000},
    //    {0.0, 0.0000, 4.0000 + 16.0000},
    //    {0.0, 0.0000, 2.0000 + 16.0000},
    //    {1.0, 0.0000, 3.0000 + 16.0000},
    //    {1.0, 0.0000, 3.0000 + 16.0000},
    //    {0.0, 0.0000, 2.0000 + 16.0000},
    //    {2.0, 0.0000, 2.0000 + 16.0000 }
    //};
    //std::vector<InstElemento> elementos;// =
    //{
    //    /*{1, 2, 3},
    //    {4, 5, 6},
    //    {7, 8, 9},
    //    {10, 11, 12},
    //    {13, 14, 15},
    //    {16, 17, 18},
    //    {19, 20, 21},
    //    {22, 23, 24},
    //    {25, 26, 27},
    //    { 28, 29, 30},
    //    { 31, 32, 33},
    //    { 34, 35, 36},
    //    { 37, 38, 39},
    //    { 40, 41, 42},
    //    { 43, 44, 45},
    //    { 46, 47, 48},
    //    { 49, 50, 51},
    //    { 52, 53, 54},
    //    { 55, 56, 57},
    //    { 58, 59, 60},
    //    { 61, 62, 63},
    //    { 64, 65, 66},
    //    { 67, 68, 69},
    //    { 70, 71, 72},
    //    { 73, 74, 75},
    //    { 76, 77, 78},
    //    { 79, 80, 81},
    //    { 82, 83, 84},
    //    { 85, 86, 87},
    //    { 88, 89, 90},
    //    { 91, 92, 93},
    //    { 94, 95, 96},
    //    { 97, 98, 99},
    //    { 100, 101, 102},
    //    { 103, 104, 105},
    //    { 106, 107, 108},
    //    { 109, 110, 111},
    //    { 112, 113, 114},
    //    { 115, 116, 117},
    //    { 118, 119, 120},*/
    //};
    //for (int indice = 0; indice < pontos.size() / 3; indice++)
    //{
    //    const int ii = indice * 3;
    //    elementos.push_back({ ii + 1, ii + 2, ii + 3 });
    //}
    //std::vector<CondContorno> deslPrescs =
    //{
    //    { 5,  3,  0 },
    //    { 6,  3,  0 },
    //    { 7,  3,  0 },
    //    { 8,  3,  0 },/*
    //    { 5,  2,  0 },
    //    { 6,  2,  0 },
    //    { 7,  2,  0 },
    //    { 8,  2,  0 },
    //    { 5,  1,  0 },
    //    { 6,  1,  0 },
    //    { 7,  1,  0 },
    //    { 8,  1,  0 }*/
    //    { 9,  3,  0 },
    //    { 10,  3,  0 },
    //    { 11,  3,  0 },
    //    { 12,  3,  0 }
    //    //{ 9,  2,  0 },
    //    //{ 10,  2,  0 },
    //    //{ 11,  2,  0 },
    //    //{ 12,  2,  0 },
    //    //{ 9,  1,  0 },
    //    //{ 10,  1,  0 },
    //    //{ 11,  1,  0 },
    //    //{ 12,  1,  0 }
    //};
    //std::vector<CondContorno> forcsPrescs =
    //{
    //    /*{ 1,  2,   1.0 },
    //    { 2,  2,   1.0 },
    //    { 3,  2,   1.0 },
    //    { 4,  2,   1.0 }*/
    //    { 1,  3,   1.0 },
    //    { 2,  3,   1.0 },
    //    { 3,  3,   1.0 },
    //    { 4,  3,   1.0 },
    //    //{ /*int(elementos.size() - 1 - 0)*/1,  2,   1.0 },
    //    //{ /*int(elementos.size() - 1 - 1)*/2,  2,   1.0 },
    //    //{ /*int(elementos.size() - 1 - 2)*/3,  2,   1.0 },
    //    //{ /*int(elementos.size() - 1 - 3)*/4,  2,   1.0 }/*,
    //    /*{ int(elementos.size()-3),  2,   1 },
    //    { int(elementos.size()-2),  2,   1 },
    //    { int(elementos.size()-1),  2,   1 },
    //    { int(elementos.size()  ),    2,   1 },*/
    //    { 5,  3,  -1.0 },
    //    { 6,  3,  -1.0 },
    //    { 7,  3,  -1.0 },
    //    { 8,  3,  -1.0 }
    //};

	
    //std::vector<Ponto> pontos = {
    //    {0.0000,  0.0000, 0.0000},
    //    {0.0000, 18.3000, 0.0000},
    //    {9.1500,  0.0000, 0.0000},
    //    {0.0000, 18.3000, 0.0000},
    //    {9.1500, 18.3000, 0.0000},
    //    {9.1500,  0.0000, 0.0000}
    //};
    //std::vector<Ponto> pontos = {
    //    {0.0000,  0.0000, 0.0000},
    //    {0.0000,  2.0000, 0.0000},
    //    {20.0000,  0.0000, 0.0000},    
    //    {0.0000,  2.0000, 0.0000},
    //    {20.0000,  2.0000, 0.0000},
    //    {20.0000,  0.0000, 0.0000}
    //};*/
    //std::vector<InstElemento> elementos =
    //{
    //    {1, 3, 2},
    //    {4, 6, 5},
    //};
    //std::vector<CondContorno> forcsPrescs =
    //{
    //    { 1,  3,  95.6 }, // 1.0 },//
    //    { 2,  3,  95.6 }, // 1.0}//  
    //};
    //std::vector<CondContorno> deslPrescs =
    //{
    //   /*{ 1,  3,   3.333e-5 },
    //   { 2,  3,   3.333e-5 } */   
    //};

	GeometryCreator gc;
	
	std::vector<Quad> quads;
	std::vector<CondContorno> deslQuads, forcsQuads;
	const double cte1 = -4.0;
	const double cte2 = -9.0;
	quads =
	{
		{
			{0.0+ cte1, 0.0+cte2, 0.0},
			{0.0 + cte1, 18.3 + cte2, 0.0},
			{9.15+ cte1, 0.0 + cte2, 0.0},
			{9.15+ cte1, 18.3 + cte2, 0.0}
		}
	};
	
	deslQuads = {};
	
	forcsQuads = { {1, 3, 95.6} };
	       

    constexpr double R = 300.0;
    constexpr double L = 600.0;
    constexpr double h = 30.0; // espessura
    constexpr double Pint = 0.26;
    constexpr double deltaTheta = 360.0 / 40.0;
    constexpr double deltaL = 60;
    constexpr double deltaR = 30;

    //gc.GetCylinderInternalPressure(R, L, h, Pint, deltaTheta, deltaL, deltaR, quads, deslQuads, forcsQuads);
    
    //gc.GetCrucifix(quads, deslQuads, forcsQuads);
    //gc.GetAxialStress(quads, deslQuads, forcsQuads);

    //gc.GetBendedRectBar(quads, deslQuads, forcsQuads);

	//gc.GetSwimmingPool(quads, deslQuads, forcsQuads);

    /*const int nivelTess = 0;

    {
        auto malhaTess = TriforceTesselation(elementos, pontos, nivelTess);
        auto condsTess = CorrigeCondContornoTess(deslPrescs, forcsPrescs, nivelTess);

        elementos = malhaTess.first;
        pontos = malhaTess.second;

        deslPrescs = condsTess.first;
        forcsPrescs = condsTess.second;
    }*/

	std::vector<Ponto> pontos;
	std::vector<InstElemento> elementos;
	std::vector<CondContorno> forcsPrescs;
	std::vector<CondContorno> deslPrescs;

	cfr.GetCase("mindlinSimples.json", E, v, pontos, elementos, forcsPrescs, deslPrescs);

    MalhaTriangular malhaQ(pontos, elementos, forcsPrescs, deslPrescs);

    //MalhaTriangularLinearDescontinua malhaQ(pontos, elementos, forcsPrescs, deslPrescs);

    //MalhaTriangular malhaQ(quads, forcsQuads, deslQuads);

    //malhaQ.Tesselate(2);
   

    std::cout << "Num elementos: " << malhaQ.cElementos.size() << std::endl;
    std::cout << "Num nodes: " << malhaQ.cElementos.size() << std::endl;

    if (malhaQ.cElementos.size() > 2000)
    {
        std::cout << "Pressione enter para continuar..." << std::endl;
        char c = 0;
        std::cin >> c;
    }


    //ElementoLinear(malhaQ, E, v);
    Resultado res = ElementoCteMindlin(malhaQ, E, v, 0.0);
	//Resultado res = ElementoCte(malhaQ, E, v);
    	
	TriangularMeshWindow dispWndQ(800, 600, L"Visualizar malha x3", malhaQ.GetMeshAsDataPointsPainted(res.compX3));
	TriangularMeshWindow dispWndQ1(800, 600, L"Visualizar malha x2", malhaQ.GetMeshAsDataPointsPainted(res.compX2));
	TriangularMeshWindow dispWndQ2(800, 600, L"Visualizar malha x1", malhaQ.GetMeshAsDataPointsPainted(res.compX1));


    //TriangularMeshWindow dispWnd(800, 600, L"Visualizar malha", malha.GetMeshAsDataPoints());

	MSG msg = { 0 };

	while (Window::PegarNumJanelas() > 0)
	{
		while (PeekMessage(&msg, 0, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}

		//dispWnd.Tick();
        dispWndQ.Tick();
		dispWndQ1.Tick();
		dispWndQ2.Tick();
	}

    return 0;
}